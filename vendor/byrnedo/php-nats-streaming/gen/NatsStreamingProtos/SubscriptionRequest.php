<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : .protocol-mod.proto
 */


namespace NatsStreamingProtos;

/**
 * Protobuf message : NatsStreamingProtos.SubscriptionRequest
 */
class SubscriptionRequest extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * clientID optional string = 1
     *
     * @var string
     */
    protected $clientID = null;

    /**
     * subject optional string = 2
     *
     * @var string
     */
    protected $subject = null;

    /**
     * qGroup optional string = 3
     *
     * @var string
     */
    protected $qGroup = null;

    /**
     * inbox optional string = 4
     *
     * @var string
     */
    protected $inbox = null;

    /**
     * maxInFlight optional int32 = 5
     *
     * @var int
     */
    protected $maxInFlight = null;

    /**
     * ackWaitInSecs optional int32 = 6
     *
     * @var int
     */
    protected $ackWaitInSecs = null;

    /**
     * durableName optional string = 7
     *
     * @var string
     */
    protected $durableName = null;

    /**
     * startPosition optional enum = 10
     *
     * @var \NatsStreamingProtos\StartPosition
     */
    protected $startPosition = null;

    /**
     * startSequence optional uint64 = 11
     *
     * @var int
     */
    protected $startSequence = null;

    /**
     * startTimeDelta optional int64 = 12
     *
     * @var int
     */
    protected $startTimeDelta = null;

    /**
     * Check if 'clientID' has a value
     *
     * @return bool
     */
    public function hasClientID()
    {
        return $this->clientID !== null;
    }

    /**
     * Get 'clientID' value
     *
     * @return string
     */
    public function getClientID()
    {
        return $this->clientID;
    }

    /**
     * Set 'clientID' value
     *
     * @param string $value
     */
    public function setClientID($value = null)
    {
        $this->clientID = $value;
    }

    /**
     * Check if 'subject' has a value
     *
     * @return bool
     */
    public function hasSubject()
    {
        return $this->subject !== null;
    }

    /**
     * Get 'subject' value
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }

    /**
     * Set 'subject' value
     *
     * @param string $value
     */
    public function setSubject($value = null)
    {
        $this->subject = $value;
    }

    /**
     * Check if 'qGroup' has a value
     *
     * @return bool
     */
    public function hasQGroup()
    {
        return $this->qGroup !== null;
    }

    /**
     * Get 'qGroup' value
     *
     * @return string
     */
    public function getQGroup()
    {
        return $this->qGroup;
    }

    /**
     * Set 'qGroup' value
     *
     * @param string $value
     */
    public function setQGroup($value = null)
    {
        $this->qGroup = $value;
    }

    /**
     * Check if 'inbox' has a value
     *
     * @return bool
     */
    public function hasInbox()
    {
        return $this->inbox !== null;
    }

    /**
     * Get 'inbox' value
     *
     * @return string
     */
    public function getInbox()
    {
        return $this->inbox;
    }

    /**
     * Set 'inbox' value
     *
     * @param string $value
     */
    public function setInbox($value = null)
    {
        $this->inbox = $value;
    }

    /**
     * Check if 'maxInFlight' has a value
     *
     * @return bool
     */
    public function hasMaxInFlight()
    {
        return $this->maxInFlight !== null;
    }

    /**
     * Get 'maxInFlight' value
     *
     * @return int
     */
    public function getMaxInFlight()
    {
        return $this->maxInFlight;
    }

    /**
     * Set 'maxInFlight' value
     *
     * @param int $value
     */
    public function setMaxInFlight($value = null)
    {
        $this->maxInFlight = $value;
    }

    /**
     * Check if 'ackWaitInSecs' has a value
     *
     * @return bool
     */
    public function hasAckWaitInSecs()
    {
        return $this->ackWaitInSecs !== null;
    }

    /**
     * Get 'ackWaitInSecs' value
     *
     * @return int
     */
    public function getAckWaitInSecs()
    {
        return $this->ackWaitInSecs;
    }

    /**
     * Set 'ackWaitInSecs' value
     *
     * @param int $value
     */
    public function setAckWaitInSecs($value = null)
    {
        $this->ackWaitInSecs = $value;
    }

    /**
     * Check if 'durableName' has a value
     *
     * @return bool
     */
    public function hasDurableName()
    {
        return $this->durableName !== null;
    }

    /**
     * Get 'durableName' value
     *
     * @return string
     */
    public function getDurableName()
    {
        return $this->durableName;
    }

    /**
     * Set 'durableName' value
     *
     * @param string $value
     */
    public function setDurableName($value = null)
    {
        $this->durableName = $value;
    }

    /**
     * Check if 'startPosition' has a value
     *
     * @return bool
     */
    public function hasStartPosition()
    {
        return $this->startPosition !== null;
    }

    /**
     * Get 'startPosition' value
     *
     * @return \NatsStreamingProtos\StartPosition
     */
    public function getStartPosition()
    {
        return $this->startPosition;
    }

    /**
     * Set 'startPosition' value
     *
     * @param \NatsStreamingProtos\StartPosition $value
     */
    public function setStartPosition(\NatsStreamingProtos\StartPosition $value = null)
    {
        $this->startPosition = $value;
    }

    /**
     * Check if 'startSequence' has a value
     *
     * @return bool
     */
    public function hasStartSequence()
    {
        return $this->startSequence !== null;
    }

    /**
     * Get 'startSequence' value
     *
     * @return int
     */
    public function getStartSequence()
    {
        return $this->startSequence;
    }

    /**
     * Set 'startSequence' value
     *
     * @param int $value
     */
    public function setStartSequence($value = null)
    {
        $this->startSequence = $value;
    }

    /**
     * Check if 'startTimeDelta' has a value
     *
     * @return bool
     */
    public function hasStartTimeDelta()
    {
        return $this->startTimeDelta !== null;
    }

    /**
     * Get 'startTimeDelta' value
     *
     * @return int
     */
    public function getStartTimeDelta()
    {
        return $this->startTimeDelta;
    }

    /**
     * Set 'startTimeDelta' value
     *
     * @param int $value
     */
    public function setStartTimeDelta($value = null)
    {
        $this->startTimeDelta = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'clientID' => null,
            'subject' => null,
            'qGroup' => null,
            'inbox' => null,
            'maxInFlight' => null,
            'ackWaitInSecs' => null,
            'durableName' => null,
            'startPosition' => null,
            'startSequence' => null,
            'startTimeDelta' => null
        ], $values);

        $message->setClientID($values['clientID']);
        $message->setSubject($values['subject']);
        $message->setQGroup($values['qGroup']);
        $message->setInbox($values['inbox']);
        $message->setMaxInFlight($values['maxInFlight']);
        $message->setAckWaitInSecs($values['ackWaitInSecs']);
        $message->setDurableName($values['durableName']);
        $message->setStartPosition($values['startPosition']);
        $message->setStartSequence($values['startSequence']);
        $message->setStartTimeDelta($values['startTimeDelta']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'SubscriptionRequest',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'clientID',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'subject',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'qGroup',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'inbox',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'maxInFlight',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'ackWaitInSecs',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 7,
                    'name' => 'durableName',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'startPosition',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_ENUM(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL(),
                    'type_name' => '.NatsStreamingProtos.StartPosition'
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 11,
                    'name' => 'startSequence',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 12,
                    'name' => 'startTimeDelta',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->clientID !== null) {
            $writer->writeVarint($stream, 10);
            $writer->writeString($stream, $this->clientID);
        }

        if ($this->subject !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->subject);
        }

        if ($this->qGroup !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->qGroup);
        }

        if ($this->inbox !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeString($stream, $this->inbox);
        }

        if ($this->maxInFlight !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->maxInFlight);
        }

        if ($this->ackWaitInSecs !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeVarint($stream, $this->ackWaitInSecs);
        }

        if ($this->durableName !== null) {
            $writer->writeVarint($stream, 58);
            $writer->writeString($stream, $this->durableName);
        }

        if ($this->startPosition !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->startPosition->value());
        }

        if ($this->startSequence !== null) {
            $writer->writeVarint($stream, 88);
            $writer->writeVarint($stream, $this->startSequence);
        }

        if ($this->startTimeDelta !== null) {
            $writer->writeVarint($stream, 96);
            $writer->writeVarint($stream, $this->startTimeDelta);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->clientID = $reader->readString($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->subject = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->qGroup = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->inbox = $reader->readString($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->maxInFlight = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 5);

                $this->ackWaitInSecs = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 7) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->durableName = $reader->readString($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 14);

                $this->startPosition = \NatsStreamingProtos\StartPosition::valueOf($reader->readVarint($stream));

                continue;
            }

            if ($tag === 11) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->startSequence = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 12) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->startTimeDelta = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->clientID !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->clientID);
        }

        if ($this->subject !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->subject);
        }

        if ($this->qGroup !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->qGroup);
        }

        if ($this->inbox !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->inbox);
        }

        if ($this->maxInFlight !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->maxInFlight);
        }

        if ($this->ackWaitInSecs !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->ackWaitInSecs);
        }

        if ($this->durableName !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->durableName);
        }

        if ($this->startPosition !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->startPosition->value());
        }

        if ($this->startSequence !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->startSequence);
        }

        if ($this->startTimeDelta !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->startTimeDelta);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->clientID = null;
        $this->subject = null;
        $this->qGroup = null;
        $this->inbox = null;
        $this->maxInFlight = null;
        $this->ackWaitInSecs = null;
        $this->durableName = null;
        $this->startPosition = null;
        $this->startSequence = null;
        $this->startTimeDelta = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \NatsStreamingProtos\SubscriptionRequest) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->clientID = ($message->clientID !== null) ? $message->clientID : $this->clientID;
        $this->subject = ($message->subject !== null) ? $message->subject : $this->subject;
        $this->qGroup = ($message->qGroup !== null) ? $message->qGroup : $this->qGroup;
        $this->inbox = ($message->inbox !== null) ? $message->inbox : $this->inbox;
        $this->maxInFlight = ($message->maxInFlight !== null) ? $message->maxInFlight : $this->maxInFlight;
        $this->ackWaitInSecs = ($message->ackWaitInSecs !== null) ? $message->ackWaitInSecs : $this->ackWaitInSecs;
        $this->durableName = ($message->durableName !== null) ? $message->durableName : $this->durableName;
        $this->startPosition = ($message->startPosition !== null) ? $message->startPosition : $this->startPosition;
        $this->startSequence = ($message->startSequence !== null) ? $message->startSequence : $this->startSequence;
        $this->startTimeDelta = ($message->startTimeDelta !== null) ? $message->startTimeDelta : $this->startTimeDelta;
    }


}

