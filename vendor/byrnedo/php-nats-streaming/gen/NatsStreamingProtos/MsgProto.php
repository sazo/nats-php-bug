<?php
/**
 * Generated by Protobuf protoc plugin.
 *
 * File descriptor : .protocol-mod.proto
 */


namespace NatsStreamingProtos;

/**
 * Protobuf message : NatsStreamingProtos.MsgProto
 */
class MsgProto extends \Protobuf\AbstractMessage
{

    /**
     * @var \Protobuf\UnknownFieldSet
     */
    protected $unknownFieldSet = null;

    /**
     * @var \Protobuf\Extension\ExtensionFieldMap
     */
    protected $extensions = null;

    /**
     * sequence optional uint64 = 1
     *
     * @var int
     */
    protected $sequence = null;

    /**
     * subject optional string = 2
     *
     * @var string
     */
    protected $subject = null;

    /**
     * reply optional string = 3
     *
     * @var string
     */
    protected $reply = null;

    /**
     * data optional bytes = 4
     *
     * @var \Protobuf\Stream
     */
    protected $data = null;

    /**
     * timestamp optional int64 = 5
     *
     * @var int
     */
    protected $timestamp = null;

    /**
     * redelivered optional bool = 6
     *
     * @var bool
     */
    protected $redelivered = null;

    /**
     * CRC32 optional uint32 = 10
     *
     * @var int
     */
    protected $CRC32 = null;

    /**
     * Check if 'sequence' has a value
     *
     * @return bool
     */
    public function hasSequence()
    {
        return $this->sequence !== null;
    }

    /**
     * Get 'sequence' value
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->sequence;
    }

    /**
     * Set 'sequence' value
     *
     * @param int $value
     */
    public function setSequence($value = null)
    {
        $this->sequence = $value;
    }

    /**
     * Check if 'subject' has a value
     *
     * @return bool
     */
    public function hasSubject()
    {
        return $this->subject !== null;
    }

    /**
     * Get 'subject' value
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->subject;
    }

    /**
     * Set 'subject' value
     *
     * @param string $value
     */
    public function setSubject($value = null)
    {
        $this->subject = $value;
    }

    /**
     * Check if 'reply' has a value
     *
     * @return bool
     */
    public function hasReply()
    {
        return $this->reply !== null;
    }

    /**
     * Get 'reply' value
     *
     * @return string
     */
    public function getReply()
    {
        return $this->reply;
    }

    /**
     * Set 'reply' value
     *
     * @param string $value
     */
    public function setReply($value = null)
    {
        $this->reply = $value;
    }

    /**
     * Check if 'data' has a value
     *
     * @return bool
     */
    public function hasData()
    {
        return $this->data !== null;
    }

    /**
     * Get 'data' value
     *
     * @return \Protobuf\Stream
     */
    public function getData()
    {
        return $this->data;
    }

    /**
     * Set 'data' value
     *
     * @param \Protobuf\Stream $value
     */
    public function setData($value = null)
    {
        if ($value !== null && ! $value instanceof \Protobuf\Stream) {
            $value = \Protobuf\Stream::wrap($value);
        }

        $this->data = $value;
    }

    /**
     * Check if 'timestamp' has a value
     *
     * @return bool
     */
    public function hasTimestamp()
    {
        return $this->timestamp !== null;
    }

    /**
     * Get 'timestamp' value
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Set 'timestamp' value
     *
     * @param int $value
     */
    public function setTimestamp($value = null)
    {
        $this->timestamp = $value;
    }

    /**
     * Check if 'redelivered' has a value
     *
     * @return bool
     */
    public function hasRedelivered()
    {
        return $this->redelivered !== null;
    }

    /**
     * Get 'redelivered' value
     *
     * @return bool
     */
    public function getRedelivered()
    {
        return $this->redelivered;
    }

    /**
     * Set 'redelivered' value
     *
     * @param bool $value
     */
    public function setRedelivered($value = null)
    {
        $this->redelivered = $value;
    }

    /**
     * Check if 'CRC32' has a value
     *
     * @return bool
     */
    public function hasCRC32()
    {
        return $this->CRC32 !== null;
    }

    /**
     * Get 'CRC32' value
     *
     * @return int
     */
    public function getCRC32()
    {
        return $this->CRC32;
    }

    /**
     * Set 'CRC32' value
     *
     * @param int $value
     */
    public function setCRC32($value = null)
    {
        $this->CRC32 = $value;
    }

    /**
     * {@inheritdoc}
     */
    public function extensions()
    {
        if ( $this->extensions !== null) {
            return $this->extensions;
        }

        return $this->extensions = new \Protobuf\Extension\ExtensionFieldMap(__CLASS__);
    }

    /**
     * {@inheritdoc}
     */
    public function unknownFieldSet()
    {
        return $this->unknownFieldSet;
    }

    /**
     * {@inheritdoc}
     */
    public static function fromStream($stream, \Protobuf\Configuration $configuration = null)
    {
        return new self($stream, $configuration);
    }

    /**
     * {@inheritdoc}
     */
    public static function fromArray(array $values)
    {
        $message = new self();
        $values  = array_merge([
            'sequence' => null,
            'subject' => null,
            'reply' => null,
            'data' => null,
            'timestamp' => null,
            'redelivered' => null,
            'CRC32' => null
        ], $values);

        $message->setSequence($values['sequence']);
        $message->setSubject($values['subject']);
        $message->setReply($values['reply']);
        $message->setData($values['data']);
        $message->setTimestamp($values['timestamp']);
        $message->setRedelivered($values['redelivered']);
        $message->setCRC32($values['CRC32']);

        return $message;
    }

    /**
     * {@inheritdoc}
     */
    public static function descriptor()
    {
        return \google\protobuf\DescriptorProto::fromArray([
            'name'      => 'MsgProto',
            'field'     => [
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 1,
                    'name' => 'sequence',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 2,
                    'name' => 'subject',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 3,
                    'name' => 'reply',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_STRING(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 4,
                    'name' => 'data',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BYTES(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 5,
                    'name' => 'timestamp',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_INT64(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 6,
                    'name' => 'redelivered',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_BOOL(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
                \google\protobuf\FieldDescriptorProto::fromArray([
                    'number' => 10,
                    'name' => 'CRC32',
                    'type' => \google\protobuf\FieldDescriptorProto\Type::TYPE_UINT32(),
                    'label' => \google\protobuf\FieldDescriptorProto\Label::LABEL_OPTIONAL()
                ]),
            ],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function toStream(\Protobuf\Configuration $configuration = null)
    {
        $config  = $configuration ?: \Protobuf\Configuration::getInstance();
        $context = $config->createWriteContext();
        $stream  = $context->getStream();

        $this->writeTo($context);
        $stream->seek(0);

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function writeTo(\Protobuf\WriteContext $context)
    {
        $stream      = $context->getStream();
        $writer      = $context->getWriter();
        $sizeContext = $context->getComputeSizeContext();

        if ($this->sequence !== null) {
            $writer->writeVarint($stream, 8);
            $writer->writeVarint($stream, $this->sequence);
        }

        if ($this->subject !== null) {
            $writer->writeVarint($stream, 18);
            $writer->writeString($stream, $this->subject);
        }

        if ($this->reply !== null) {
            $writer->writeVarint($stream, 26);
            $writer->writeString($stream, $this->reply);
        }

        if ($this->data !== null) {
            $writer->writeVarint($stream, 34);
            $writer->writeByteStream($stream, $this->data);
        }

        if ($this->timestamp !== null) {
            $writer->writeVarint($stream, 40);
            $writer->writeVarint($stream, $this->timestamp);
        }

        if ($this->redelivered !== null) {
            $writer->writeVarint($stream, 48);
            $writer->writeBool($stream, $this->redelivered);
        }

        if ($this->CRC32 !== null) {
            $writer->writeVarint($stream, 80);
            $writer->writeVarint($stream, $this->CRC32);
        }

        if ($this->extensions !== null) {
            $this->extensions->writeTo($context);
        }

        return $stream;
    }

    /**
     * {@inheritdoc}
     */
    public function readFrom(\Protobuf\ReadContext $context)
    {
        $reader = $context->getReader();
        $length = $context->getLength();
        $stream = $context->getStream();

        $limit = ($length !== null)
            ? ($stream->tell() + $length)
            : null;

        while ($limit === null || $stream->tell() < $limit) {

            if ($stream->eof()) {
                break;
            }

            $key  = $reader->readVarint($stream);
            $wire = \Protobuf\WireFormat::getTagWireType($key);
            $tag  = \Protobuf\WireFormat::getTagFieldNumber($key);

            if ($stream->eof()) {
                break;
            }

            if ($tag === 1) {
                \Protobuf\WireFormat::assertWireType($wire, 4);

                $this->sequence = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 2) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->subject = $reader->readString($stream);

                continue;
            }

            if ($tag === 3) {
                \Protobuf\WireFormat::assertWireType($wire, 9);

                $this->reply = $reader->readString($stream);

                continue;
            }

            if ($tag === 4) {
                \Protobuf\WireFormat::assertWireType($wire, 12);

                $this->data = $reader->readByteStream($stream);

                continue;
            }

            if ($tag === 5) {
                \Protobuf\WireFormat::assertWireType($wire, 3);

                $this->timestamp = $reader->readVarint($stream);

                continue;
            }

            if ($tag === 6) {
                \Protobuf\WireFormat::assertWireType($wire, 8);

                $this->redelivered = $reader->readBool($stream);

                continue;
            }

            if ($tag === 10) {
                \Protobuf\WireFormat::assertWireType($wire, 13);

                $this->CRC32 = $reader->readVarint($stream);

                continue;
            }

            $extensions = $context->getExtensionRegistry();
            $extension  = $extensions ? $extensions->findByNumber(__CLASS__, $tag) : null;

            if ($extension !== null) {
                $this->extensions()->add($extension, $extension->readFrom($context, $wire));

                continue;
            }

            if ($this->unknownFieldSet === null) {
                $this->unknownFieldSet = new \Protobuf\UnknownFieldSet();
            }

            $data    = $reader->readUnknown($stream, $wire);
            $unknown = new \Protobuf\Unknown($tag, $wire, $data);

            $this->unknownFieldSet->add($unknown);

        }
    }

    /**
     * {@inheritdoc}
     */
    public function serializedSize(\Protobuf\ComputeSizeContext $context)
    {
        $calculator = $context->getSizeCalculator();
        $size       = 0;

        if ($this->sequence !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->sequence);
        }

        if ($this->subject !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->subject);
        }

        if ($this->reply !== null) {
            $size += 1;
            $size += $calculator->computeStringSize($this->reply);
        }

        if ($this->data !== null) {
            $size += 1;
            $size += $calculator->computeByteStreamSize($this->data);
        }

        if ($this->timestamp !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->timestamp);
        }

        if ($this->redelivered !== null) {
            $size += 1;
            $size += 1;
        }

        if ($this->CRC32 !== null) {
            $size += 1;
            $size += $calculator->computeVarintSize($this->CRC32);
        }

        if ($this->extensions !== null) {
            $size += $this->extensions->serializedSize($context);
        }

        return $size;
    }

    /**
     * {@inheritdoc}
     */
    public function clear()
    {
        $this->sequence = null;
        $this->subject = null;
        $this->reply = null;
        $this->data = null;
        $this->timestamp = null;
        $this->redelivered = null;
        $this->CRC32 = null;
    }

    /**
     * {@inheritdoc}
     */
    public function merge(\Protobuf\Message $message)
    {
        if ( ! $message instanceof \NatsStreamingProtos\MsgProto) {
            throw new \InvalidArgumentException(sprintf('Argument 1 passed to %s must be a %s, %s given', __METHOD__, __CLASS__, get_class($message)));
        }

        $this->sequence = ($message->sequence !== null) ? $message->sequence : $this->sequence;
        $this->subject = ($message->subject !== null) ? $message->subject : $this->subject;
        $this->reply = ($message->reply !== null) ? $message->reply : $this->reply;
        $this->data = ($message->data !== null) ? $message->data : $this->data;
        $this->timestamp = ($message->timestamp !== null) ? $message->timestamp : $this->timestamp;
        $this->redelivered = ($message->redelivered !== null) ? $message->redelivered : $this->redelivered;
        $this->CRC32 = ($message->CRC32 !== null) ? $message->CRC32 : $this->CRC32;
    }


}

